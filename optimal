import cv2
import numpy as np
from flask import Flask, Response, jsonify, render_template
import threading
import time
import os
from ultralytics import YOLO

app = Flask(__name__)

class VehicleDetectionSystem:
    def __init__(self):
        # Load YOLO model once at startup
        print("Loading YOLO model...")
        self.model = YOLO('yolov8n.pt')
        self.vehicle_classes = [2, 3, 5, 7]  # car, motorcycle, bus, truck
        self.vehicle_count = 0
        self.is_processing = False
        print("Model loaded successfully!")
    
    def detect_vehicles(self, frame):
        """Detect vehicles in frame"""
        try:
            results = self.model(frame, verbose=False)
            vehicles = []
            
            for result in results:
                boxes = result.boxes
                for box in boxes:
                    class_id = int(box.cls[0])
                    if class_id in self.vehicle_classes:
                        confidence = float(box.conf[0])
                        if confidence > 0.5:  # Confidence threshold
                            vehicles.append({
                                'class_id': class_id,
                                'confidence': confidence
                            })
            
            return len(vehicles)
        except Exception as e:
            print(f"Detection error: {e}")
            return 0

# Global detection system
detector = VehicleDetectionSystem()

@app.route('/')
def index():
    """Main page"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Vehicle Detection - FREE</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 800px; margin: 0 auto; }
            .status { padding: 20px; background: #f0f0f0; border-radius: 10px; }
            .live-data { margin-top: 20px; padding: 20px; background: #e8f4fd; border-radius: 10px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöó Vehicle Detection System</h1>
            <p>Deployed on <strong>Render.com FREE tier</strong></p>
            
            <div class="status">
                <h3>System Status: <span style="color: green;">‚óè Active</span></h3>
                <p>Vehicle Count: <span id="vehicleCount">0</span></p>
                <p>Model: YOLOv8n (Free)</p>
            </div>
            
            <div class="live-data">
                <h3>API Endpoints:</h3>
                <ul>
                    <li><a href="/status">/status</a> - System status</li>
                    <li><a href="/detect/sample">/detect/sample</a> - Test detection</li>
                </ul>
            </div>
            
            <div style="margin-top: 30px;">
                <h4>How to connect ESP32:</h4>
                <ol>
                    <li>Ensure your ESP32 stream is accessible online</li>
                    <li>Use the API endpoints to send images</li>
                    <li>Get vehicle count in JSON response</li>
                </ol>
            </div>
        </div>
        
        <script>
            // Update vehicle count every 3 seconds
            function updateCount() {
                fetch('/status')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('vehicleCount').textContent = data.vehicle_count;
                    });
            }
            
            setInterval(updateCount, 3000);
            updateCount();
        </script>
    </body>
    </html>
    """

@app.route('/status')
def status():
    """API endpoint for system status"""
    return jsonify({
        'status': 'active',
        'vehicle_count': detector.vehicle_count,
        'model': 'yolov8n',
        'platform': 'render-free',
        'timestamp': time.time()
    })

@app.route('/detect/sample')
def detect_sample():
    """Test detection with sample image"""
    try:
        # Create a sample image for testing
        sample_image = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        
        # Detect vehicles
        count = detector.detect_vehicles(sample_image)
        detector.vehicle_count = count
        
        return jsonify({
            'success': True,
            'vehicles_detected': count,
            'message': 'Sample detection completed'
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/detect/upload', methods=['POST'])
def detect_upload():
    """Endpoint for image upload detection"""
    try:
        from flask import request
        
        if 'image' not in request.files:
            return jsonify({'error': 'No image provided'}), 400
        
        image_file = request.files['image']
        
        # Read image
        image_bytes = image_file.read()
        image_array = np.frombuffer(image_bytes, np.uint8)
        image = cv2.imdecode(image_array, cv2.IMREAD_COLOR)
        
        if image is None:
            return jsonify({'error': 'Invalid image'}), 400
        
        # Detect vehicles
        count = detector.detect_vehicles(image)
        detector.vehicle_count = count
        
        return jsonify({
            'success': True,
            'vehicles_detected': count,
            'processing_time': 'real-time'
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# Health check endpoint for Render
@app.route('/health')
def health():
    return jsonify({'status': 'healthy', 'timestamp': time.time()})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)
